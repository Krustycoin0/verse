generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// A published space
model Space {
  id        Int      @id @default(autoincrement())
  publicId  String   @unique @db.Char(14)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  owner String @db.Char(42)

  // The token id of the NFT, if it exists
  tokenId Int?

  Project    Project[]
  SpaceModel SpaceModel?
  SpaceNFT   SpaceNFT?
}

// A model that has been published to S3
// It has a unique id and is immutable, to help with caching
model SpaceModel {
  id        Int      @id @default(autoincrement())
  publicId  String   @unique @db.Char(14)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Space   Space @relation(fields: [spaceId], references: [id])
  spaceId Int   @unique
}

// An NFT that is being stored within S3
// It is linked to a space, so that it's metadata can be updated when the space is updated
model SpaceNFT {
  id        Int      @id @default(autoincrement())
  publicId  String   @unique @db.Char(14)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Space   Space @relation(fields: [spaceId], references: [id])
  spaceId Int   @unique
}

// A project within the editor
model Project {
  id        Int      @id @default(autoincrement())
  publicId  String   @unique @db.Char(14)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  owner String @db.Char(42)

  name        String @default("") @db.VarChar(80) // Deprecated, use title
  title       String @default("") @db.VarChar(80)
  description String @default("") @db.VarChar(1200)

  // A project can be linked to a space, allowing the user to push updates to it
  Space   Space? @relation(fields: [spaceId], references: [id])
  spaceId Int?

  @@index([spaceId])
}
