generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// A published space
model Space {
  id        Int      @id @default(autoincrement())
  publicId  String   @unique @db.Char(12)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Owner   AuthUser @relation(fields: [ownerId], references: [id])
  ownerId String

  // The token id of the NFT, if it exists
  tokenId Int?

  Project    Project[]
  SpaceModel SpaceModel?
  SpaceNFT   SpaceNFT?

  @@index([ownerId])
}

// A model that has been published to S3
// It has a unique id and is immutable, to help with caching
model SpaceModel {
  id        Int      @id @default(autoincrement())
  publicId  String   @unique @db.Char(12)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Space   Space @relation(fields: [spaceId], references: [id])
  spaceId Int   @unique
}

// An NFT that is being stored within S3
// It is linked to a space, so that it's metadata can be updated when the space is updated
model SpaceNFT {
  id        Int      @id @default(autoincrement())
  publicId  String   @unique @db.Char(12)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Space   Space @relation(fields: [spaceId], references: [id])
  spaceId Int   @unique
}

// A project within the studio
model Project {
  id        Int      @id @default(autoincrement())
  publicId  String   @unique @db.Char(12)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Owner   AuthUser @relation(fields: [ownerId], references: [id])
  ownerId String

  title       String @default("") @db.VarChar(80)
  description String @default("") @db.VarChar(1200)

  // A project can be linked to a space, allowing the user to push updates to it
  Space   Space? @relation(fields: [spaceId], references: [id])
  spaceId Int?

  @@index([spaceId])
  @@index([ownerId])
}

// A user's profile
model Profile {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  User   AuthUser @relation(fields: [userId], references: [id])
  userId String   @id @unique

  name       String? @db.VarChar(50)
  bio        String? @db.VarChar(160)
  image      String?
  background String?

  // Files stored in S3
  imageId      String? @db.Char(12)
  backgroundId String? @db.Char(12)
}

// Auth (https://lucia-auth.com/database/prisma)
model AuthUser {
  id           String        @id @unique
  auth_session AuthSession[]
  auth_key     AuthKey[]

  // The user's ethereum address
  address String? @unique @db.Char(42)

  // The part of their handle that comes before the @
  username String @unique @db.VarChar(15)

  Profile Profile?

  Space   Space[]
  Project Project[]

  @@map("auth_user")
}

model AuthSession {
  id             String   @id @unique
  user_id        String
  active_expires BigInt
  idle_expires   BigInt
  auth_user      AuthUser @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
  @@map("auth_session")
}

model AuthKey {
  id              String   @id @unique
  hashed_password String?
  user_id         String
  primary_key     Boolean
  expires         BigInt?
  auth_user       AuthUser @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
  @@map("auth_key")
}

// Temporary sessions used in Ethereum authentication
model AuthEthereumSession {
  id        String   @id @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  nonce String
}
