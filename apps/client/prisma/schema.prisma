generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model ViewEvent {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  Publication   Publication @relation(fields: [publicationId], references: [id])
  publicationId String

  @@index([publicationId])
}

model Publication {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  owner   String?
  spaceId Int?

  ViewEvents ViewEvent[]
  viewCount  Int         @default(0)

  Projects         Project[]
  PublicationAsset PublicationAsset[]
}

model Project {
  id        String   @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  owner String

  name        String @db.VarChar(80)
  description String @db.VarChar(1200)

  Publication   Publication? @relation(fields: [publicationId], references: [id])
  publicationId String?

  Assets Asset[]

  @@index([publicationId])
}

// Connects a publication to an asset
// Allows for multiple publications to share the same asset
model PublicationAsset {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Publication   Publication @relation(fields: [publicationId], references: [id])
  publicationId String

  Asset   Asset  @relation(fields: [assetId], references: [id])
  assetId String

  @@index([publicationId])
  @@index([assetId])
}

// Represents an asset file within s3
model Asset {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Project   Project? @relation(fields: [projectId], references: [id])
  projectId String?

  PublicationAsset PublicationAsset[]

  @@index([projectId])
}

// Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
